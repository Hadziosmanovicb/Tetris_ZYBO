#include "xparameters.h"
#include "xil_printf.h"
#include "ff.h"

/* Global Variables */
static FATFS fatfs; // FATFS object
#define XST_SUCCESS 0
#define XST_FAILURE 1

/* Function to Read and Print File Contents */
int ReadFile(const char *filename) {
    FIL file;
    FRESULT res;
    char buffer[128];
    UINT bytesRead;

    xil_printf("Opening file: %s\r\n", filename);

    // Open the file
    res = f_open(&file, filename, FA_READ);
    if (res != FR_OK) {
        xil_printf("Failed to open file: %d\r\n", res);
        return XST_FAILURE;
    }

    xil_printf("File opened successfully. Reading contents:\r\n");

    // Read the file in chunks and print to UART
    do {
        res = f_read(&file, buffer, sizeof(buffer) - 1, &bytesRead);
        if (res != FR_OK) {
            xil_printf("Error reading file: %d\r\n", res);
            f_close(&file);
            return XST_FAILURE;
        }

        buffer[bytesRead] = '\0'; // Null-terminate the string for printing
        xil_printf("%s", buffer); // Print the file contents
    } while (bytesRead > 0);

    xil_printf("\r\nFile reading complete.\r\n");

    // Close the file
    f_close(&file);
    return XST_SUCCESS;
}

/* Main Function */
int main(void) {
    xil_printf("Mounting SD card...\r\n");

    if (f_mount(&fatfs, "0:/", 0) != FR_OK) {
        xil_printf("Failed to mount SD card\r\n");
        return XST_FAILURE;
    }

    xil_printf("SD card mounted successfully.\r\n");

    // Focus on opening and reading SIMPLE~1.PPM
    if (ReadFile("0:/simple.PPM") != XST_SUCCESS) {
        xil_printf("Failed to read SIMPLE~1.PPM.\r\n");
        return XST_FAILURE;
    }

    xil_printf("Program complete.\r\n");
    while (1);
    return XST_SUCCESS;
}
