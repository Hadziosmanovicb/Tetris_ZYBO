#include "hardware_init.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "interrupts.h"
#include "define.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "interrupts.h"
#include "hardware_init.h"
#include "define.h"
#include <stdio.h>
#include "xtime_l.h"
#include "display_demo.h"
#include "display_demo.h"
#include "display_ctrl/display_ctrl.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"

DisplayCtrl dispCtrl;
XAxiVdma vdma;

/*
 * Framebuffers for video data
 */
u8  frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME] __attribute__((aligned(0x20)));
u8 *pFrames[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers


int initializeHardware(XGpio *ledInst, XGpio *btnInst, XGpio *swInst, XScuGic *intcInst) {
    int status;


    status = XGpio_Initialize(ledInst, LEDS_DEVICE_ID);
    if (status != XST_SUCCESS) return XST_FAILURE;
    XGpio_SetDataDirection(ledInst, 1, 0x00);

    // Initialize Button GPIO
    status = XGpio_Initialize(btnInst, BTNS_DEVICE_ID);
    if (status != XST_SUCCESS) return XST_FAILURE;
    XGpio_SetDataDirection(btnInst, 1, 0xFF);

    // Initialize Switch GPIO
    status = XGpio_Initialize(swInst, SWITCHES_DEVICE_ID);
    if (status != XST_SUCCESS) return XST_FAILURE;
    XGpio_SetDataDirection(swInst, 1, 0xFF);

    // Initialize Interrupt System
    status = IntcInitFunction(INTC_DEVICE_ID, btnInst);
    if (status != XST_SUCCESS) return XST_FAILURE;

    return XST_SUCCESS;
}

void initializeUART() {
    XUartPs_Config *Config;
    int Status;

    Config = XUartPs_LookupConfig(XPAR_PS7_UART_1_DEVICE_ID);
    if (Config == NULL) {
        xil_printf("UART Config Lookup Failed.\n");
        return XST_FAILURE;
    }

    Status = XUartPs_CfgInitialize(&uartInstance, Config, Config->BaseAddress);
    if (Status != XST_SUCCESS) {
        xil_printf("UART Initialization Failed.\n");
        return XST_FAILURE;
    }

    // Set UART baud rate and options as needed
    Status = XUartPs_SetBaudRate(&uartInstance, 115200);
    if (Status != XST_SUCCESS) {
        xil_printf("UART Baud Rate Setup Failed.\n");
        return XST_FAILURE;
    }

    return XST_SUCCESS;
}


void DemoInitialize()
{
    int Status;
    XAxiVdma_Config *vdmaConfig;
    int i;


    // Initialize the frame pointers
        for (i = 0; i < DISPLAY_NUM_FRAMES; i++) {
            pFrames[i] = frameBuf[i];
        }

    TimerInitialize(SCU_TIMER_ID);


    vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
    if (!vdmaConfig)
    {
        xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
        return;
    }
    Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
    if (Status != XST_SUCCESS)
    {
        xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
        return;
    }


    Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, pFrames, DEMO_STRIDE);
    if (Status != XST_SUCCESS)
    {
        xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
        return;
    }
    Status = DisplayStart(&dispCtrl);
    if (Status != XST_SUCCESS)
    {
        xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
        return;
    }


       xil_printf("Demo initialization completed. Frames set up.\r\n");
}
/*
int DisplaySetFrame(DisplayCtrl *dispCtrl, u8 frameIndex)
{
    int Status;

    // Ensure the frame index is within range
    if (frameIndex >= DISPLAY_NUM_FRAMES) {
        xil_printf("Error: Invalid frame index %d. Valid range is 0 to %d.\r\n", frameIndex, DISPLAY_NUM_FRAMES - 1);
        return XST_FAILURE;
    }

    // Update the VDMA with the new frame buffer address
    Status = XAxiVdma_StartParking(dispCtrl->vdma, frameIndex, XAXIVDMA_READ);
    if (Status != XST_SUCCESS) {
        xil_printf("Error: Failed to set frame %d in VDMA.\r\n", frameIndex);
        return XST_FAILURE;
    }

    // Update the current frame index in the display controller structure
    dispCtrl->curFrame = frameIndex;

    return XST_SUCCESS;
}
*/
